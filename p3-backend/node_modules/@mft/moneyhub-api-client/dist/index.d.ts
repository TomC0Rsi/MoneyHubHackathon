import { generators } from "openid-client";
import type { ApiClientConfig } from "./schema/config";
declare const _Moneyhub: (apiClientConfig: ApiClientConfig) => Promise<{
    keys: () => {
        keys: import("./schema/config").JSONWebKey[];
    } | null;
    generators: typeof generators;
    registerUser: ({ clientUserId, }: {
        clientUserId: string;
    }) => Promise<Users.User>;
    getUsers: (params?: import("./request").SearchParams | undefined) => Promise<import("./request").ApiResponse<Users.User[]>>;
    getSCIMUsers: (params?: import("./request").SearchParams | undefined) => Promise<import("./request").ApiResponse<any>>;
    getUser: ({ userId, }: {
        userId: string;
    }) => Promise<Users.User>;
    getUserConnections: ({ userId, }: {
        userId: string;
    }) => Promise<import("./request").ApiResponse<import("./schema/connection").UserConnection[]>>;
    deleteUserConnection: ({ userId, connectionId, }: {
        userId: string;
        connectionId: string;
    }) => Promise<number>;
    deleteUser: ({ userId, }: {
        userId: string;
    }) => Promise<number>;
    getConnectionSyncs: ({ userId, connectionId, params, }: {
        userId: string;
        connectionId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Syncs.ConnectionSync[]>>;
    getSync: ({ userId, syncId, }: {
        userId: string;
        syncId: string;
    }) => Promise<import("./request").ApiResponse<Syncs.ConnectionSync>>;
    updateUserConnection: ({ userId, connectionId, expiresAt, }: {
        userId: string;
        connectionId: string;
        expiresAt: string;
    }) => Promise<number>;
    getGlobalCounterparties: (params?: Counterparties.GlobalCounterpartiesSearchParams | undefined) => Promise<import("./request").ApiResponse<Counterparties.GlobalCounterparty[]>>;
    listConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("./schema/connection").WellKnownConnection[]>;
    listAPIConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("./schema/connection").WellKnownConnection[]>;
    listTestConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("./schema/connection").WellKnownConnection[]>;
    listBetaConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("./schema/connection").WellKnownConnection[]>;
    listPaymentsConnections: (query?: {
        clientId?: string | undefined;
    } | undefined) => Promise<import("./schema/connection").WellKnownConnection[]>;
    getOpenIdConfig: () => Promise<unknown>;
    getTransactions: ({ userId, params, }: {
        userId: string;
        params?: Transactions.TransactionSearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Transactions.Transaction[]>>;
    getTransaction: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }) => Promise<import("./request").ApiResponse<Transactions.Transaction>>;
    addTransaction: ({ userId, transaction, }: {
        userId: string;
        transaction: Transactions.TransactionPost;
    }) => Promise<import("./request").ApiResponse<Transactions.Transaction>>;
    addTransactions: ({ userId, transactions, params, }: {
        userId: string;
        transactions: Transactions.TransactionPost[];
        params?: {
            categorise?: boolean | undefined;
        } | undefined;
    }) => Promise<import("./request").ApiResponse<{
        id: string;
    }[]>>;
    updateTransaction: ({ userId, transactionId, transaction, }: {
        userId: string;
        transactionId: string;
        transaction: Partial<Transactions.TransactionPost>;
    }) => Promise<import("./request").ApiResponse<Transactions.Transaction>>;
    deleteTransaction: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }) => Promise<import("./request").ApiResponse<number>>;
    splitTransaction: ({ userId, transactionId, splits, }: {
        userId: string;
        transactionId: string;
        splits: Transactions.TransactionSplitPost[];
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionSplit[]>>;
    getTransactionSplits: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionSplit[]>>;
    patchTransactionSplit: ({ userId, transactionId, splitId, split, }: {
        userId: string;
        transactionId: string;
        splitId: string;
        split: Transactions.TransactionSplitPatch;
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionSplit[]>>;
    deleteTransactionSplits: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }) => Promise<number>;
    addFileToTransaction: ({ userId, transactionId, fileData, fileName, }: {
        userId: string;
        transactionId: string;
        fileName: string;
        fileData: any;
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionFile>>;
    getTransactionFiles: ({ userId, transactionId, }: {
        userId: string;
        transactionId: string;
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionFile[]>>;
    getTransactionFile: ({ userId, transactionId, fileId, }: {
        userId: string;
        transactionId: string;
        fileId: string;
    }) => Promise<import("./request").ApiResponse<Transactions.TransactionFile>>;
    deleteTransactionFile: ({ userId, transactionId, fileId, }: {
        userId: string;
        transactionId: string;
        fileId: string;
    }) => Promise<number>;
    getTaxReturn: ({ userId, params, }: {
        userId: string;
        params?: Taxes.TaxSearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Taxes.Tax>>;
    syncUserConnection: ({ userId, connectionId, customerIpAddress, customerLastLoggedTime, }: {
        userId: string;
        connectionId: string;
        customerIpAddress?: string | undefined;
        customerLastLoggedTime?: string | undefined;
    }) => Promise<import("./request").ApiResponse<Syncs.SyncResponse>>;
    getStandingOrder: ({ id }: {
        id: string;
    }) => Promise<import("./request").ApiResponse<StandingOrders.StandingOrderRequest>>;
    getStandingOrders: (params?: StandingOrders.StandingOrderSearchParams | undefined) => Promise<import("./request").ApiResponse<StandingOrders.StandingOrderRequest[]>>;
    getSpendingGoals: (params: import("./request").SearchParams, userId: string) => Promise<import("./request").ApiResponse<SpendingGoals.SpendingGoal[]>>;
    getSpendingGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }) => Promise<import("./request").ApiResponse<SpendingGoals.SpendingGoal>>;
    createSpendingGoal: ({ categoryId, periodType, periodStart, amount, userId, }: {
        categoryId: string;
        periodType?: ("monthly" | "annual") | undefined;
        periodStart?: string | undefined;
        amount: {
            value: number;
        };
        userId: string;
    }) => Promise<import("./request").ApiResponse<SpendingGoals.SpendingGoal>>;
    updateSpendingGoal: ({ goalId, categoryId, amount, userId, }: {
        goalId: string;
        categoryId?: string | undefined;
        amount?: {
            value: number;
        } | undefined;
        userId: string;
    }) => Promise<import("./request").ApiResponse<SpendingGoals.SpendingGoal>>;
    deleteSpendingGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }) => Promise<number>;
    getSpendingAnalysis: ({ userId, dates, accountIds, categoryIds, projectIds, }: {
        userId: string;
        dates: {
            name: string;
            from: string;
            to: string;
        }[];
        accountIds?: string[] | undefined;
        categoryIds?: string[] | undefined;
        projectIds?: string[] | undefined;
    }) => Promise<import("./request").ApiResponse<SpendingAnalysis.SpendingAnalysis>>;
    getSavingsGoals: (params: import("./request").SearchParams, userId: string) => Promise<import("./request").ApiResponse<SavingsGoals.SavingsGoal[]>>;
    getSavingsGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }) => Promise<import("./request").ApiResponse<SavingsGoals.SavingsGoal>>;
    createSavingsGoal: ({ name, imageUrl, notes, accounts, amount, userId, }: {
        name: string;
        imageUrl?: string | undefined;
        notes?: string | undefined;
        accounts: {
            id: string;
        }[];
        amount: {
            value: number;
            currency?: string | undefined;
        };
        userId: string;
    }) => Promise<import("./request").ApiResponse<SavingsGoals.SavingsGoal>>;
    updateSavingsGoal: ({ goalId, name, amount, imageUrl, notes, accounts, userId, }: {
        goalId: string;
        name?: string | undefined;
        imageUrl?: string | undefined;
        notes?: string | undefined;
        accounts: {
            id: string;
        }[];
        amount?: {
            value: number;
        } | undefined;
        userId: string;
    }) => Promise<import("./request").ApiResponse<SavingsGoals.SavingsGoal>>;
    deleteSavingsGoal: ({ goalId, userId, }: {
        goalId: string;
        userId: string;
    }) => Promise<number>;
    getRentalRecords: ({ userId, }: {
        userId: string;
    }) => Promise<import("./request").ApiResponse<RentalRecords.RentalRecord[]>>;
    createRentalRecord: ({ userId, rentalData, }: {
        userId: string;
        rentalData: RentalRecords.RentalRecordPost;
    }) => Promise<import("./request").ApiResponse<RentalRecords.RentalRecord>>;
    deleteRentalRecord: ({ userId, rentalId, }: {
        userId: string;
        rentalId: string;
    }) => Promise<number>;
    getRegularTransactions: ({ userId, params, }: {
        userId: string;
        params?: RegularTransactions.RegularTransactionSearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<RegularTransactions.RegularTransaction[]>>;
    getRecurringPayments: (params?: Payments.RecurringPaymentSearchParams | undefined) => Promise<import("./request").ApiResponse<Payments.RecurringPaymentRequest[]>>;
    getRecurringPayment: ({ recurringPaymentId, }: {
        recurringPaymentId: string;
    }) => Promise<import("./request").ApiResponse<Payments.RecurringPaymentRequest>>;
    makeRecurringPayment: ({ recurringPaymentId, payment, }: {
        recurringPaymentId: string;
        payment: Payments.PaymentsClaims;
    }) => Promise<import("./request").ApiResponse<Payments.RecurringPaymentRequest>>;
    revokeRecurringPayment: ({ recurringPaymentId, }: {
        recurringPaymentId: string;
    }) => Promise<number>;
    getProjects: ({ userId, params, }: {
        userId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Projects.Project[]>>;
    getProject: ({ userId, projectId, }: {
        userId: string;
        projectId: string;
    }) => Promise<import("./request").ApiResponse<Projects.Project>>;
    addProject: ({ userId, project, }: {
        userId: string;
        project: Projects.ProjectPost;
    }) => Promise<import("./request").ApiResponse<Projects.Project>>;
    updateProject: ({ userId, projectId, project, }: {
        userId: string;
        projectId: string;
        project: Projects.ProjectPatch;
    }) => Promise<import("./request").ApiResponse<Projects.Project>>;
    deleteProject: ({ userId, projectId, }: {
        userId: string;
        projectId: string;
    }) => Promise<number>;
    getPayment: ({ id }: {
        id: string;
    }) => Promise<import("./request").ApiResponse<Payments.Payment>>;
    getPayments: (params?: Payments.PaymentSearchParams | undefined) => Promise<import("./request").ApiResponse<Payments.Payment[]>>;
    getPaymentFromIDToken: ({ idToken }: {
        idToken: string;
    }) => Promise<import("./request").ApiResponse<Payments.Payment>>;
    addPayee: ({ accountNumber, sortCode, name, externalId, userId, }: {
        accountNumber: string;
        sortCode: string;
        name: string;
        externalId?: string | undefined;
        userId?: string | undefined;
    }) => Promise<import("./request").ApiResponse<Payees.Payee>>;
    getPayees: (params?: Payees.PayeesSearchParams | undefined) => Promise<import("./request").ApiResponse<Payees.Payee[]>>;
    getPayee: ({ id }: {
        id: string;
    }) => Promise<import("./request").ApiResponse<Payees.Payee>>;
    getCategories: ({ userId, params, }: {
        userId: string;
        params?: (import("./request").SearchParams & {
            type?: Categories.CategoryType | undefined;
        }) | undefined;
    }) => Promise<import("./request").ApiResponse<Categories.Category[]>>;
    getStandardCategories: ({ params, }: {
        params?: (import("./request").SearchParams & {
            type?: Categories.CategoryType | undefined;
        }) | undefined;
    }) => Promise<import("./request").ApiResponse<Categories.Category[]>>;
    getCategory: ({ userId, categoryId, params, }: {
        userId: string;
        categoryId: string;
        params?: {
            type?: Categories.CategoryType | undefined;
        } | undefined;
    }) => Promise<import("./request").ApiResponse<Categories.Category>>;
    getCategoryGroups: ({ userId, params, }: {
        userId: string;
        params?: {
            type?: Categories.CategoryType | undefined;
        } | undefined;
    }) => Promise<import("./request").ApiResponse<Categories.CategoryGroup[]>>;
    getStandardCategoryGroups: ({ params, }: {
        params?: {
            type?: Categories.CategoryType | undefined;
        } | undefined;
    }) => Promise<import("./request").ApiResponse<Categories.CategoryGroup[]>>;
    createCustomCategory: ({ userId, category, }: {
        userId: string;
        category: Categories.CategoryPost;
    }) => Promise<import("./request").ApiResponse<Categories.Category>>;
    getBeneficiary: ({ id, userId, }: {
        id: string;
        userId: string;
    }) => Promise<import("./request").ApiResponse<Beneficiaries.Beneficiary>>;
    getBeneficiaryWithDetail: ({ id, userId, }: {
        id: string;
        userId: string;
    }) => Promise<import("./request").ApiResponse<Beneficiaries.BeneficiaryWithDetails>>;
    getBeneficiaries: ({ params, userId, }: {
        params?: import("./request").SearchParams | undefined;
        userId: string;
    }) => Promise<import("./request").ApiResponse<Beneficiaries.Beneficiary[]>>;
    getBeneficiariesWithDetail: ({ params, userId, }: {
        params?: import("./request").SearchParams | undefined;
        userId: string;
    }) => Promise<import("./request").ApiResponse<Beneficiaries.BeneficiaryWithDetails[]>>;
    createAuthRequest: ({ redirectUri, userId, scope, connectionId, payment, standingOrder, recurringPayment, reversePayment, categorisationType, benefitsCheck, counterpartiesCheck, permissions, expirationDateTime, transactionsFromDateTime, sync, }: {
        redirectUri?: string | undefined;
        userId?: string | undefined;
        scope: string;
        connectionId?: string | undefined;
        payment?: Payments.AuthRequestPostPayment | undefined;
        standingOrder?: StandingOrders.AuthRequestStandingOrderPost | undefined;
        recurringPayment?: Payments.AuthRequestPostRecurringPayment | undefined;
        reversePayment?: Payments.AuthRequestPostReversePayment | undefined;
        categorisationType?: Accounts.AccountType | undefined;
        benefitsCheck?: boolean | undefined;
        counterpartiesCheck?: string[] | undefined;
        permissions?: ("ReadStandingOrdersBasic" | "ReadStandingOrdersDetail" | "ReadBeneficiariesDetail") | undefined;
        expirationDateTime?: string | undefined;
        transactionsFromDateTime?: string | undefined;
        sync?: {
            enableAsync?: boolean | undefined;
        } | undefined;
    }) => Promise<import("./request").ApiResponse<AuthRequests.AuthRequest>>;
    completeAuthRequest: ({ id, authParams, }: {
        id: string;
        authParams: AuthRequests.AuthParams;
    }) => Promise<import("./request").ApiResponse<AuthRequests.AuthRequest>>;
    getAllAuthRequests: (params?: import("./request").SearchParams | undefined) => Promise<import("./request").ApiResponse<AuthRequests.AuthRequest[]>>;
    getAuthRequest: ({ id }: {
        id: string;
    }) => Promise<import("./request").ApiResponse<AuthRequests.AuthRequest>>;
    createAffordability: ({ userId }: {
        userId: string;
    }) => Promise<import("./request").ApiResponse<Affordability.Affordability>>;
    getAffordability: ({ userId, id }: {
        userId: string;
        id: string;
    }) => Promise<import("./request").ApiResponse<Affordability.Affordability>>;
    getAllAffordability: ({ userId, ...query }: {
        userId: string;
    } & import("./request").SearchParams) => Promise<import("./request").ApiResponse<Affordability.AffordabilityMetadata[]>>;
    getAccounts: ({ userId }: {
        userId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Accounts.Account[]>>;
    getAccountsWithDetails: ({ userId, }: {
        userId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Accounts.AccountWithDetails[]>>;
    getAccountsList: ({ userId }: {
        userId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Accounts.Account[]>>;
    getAccountsListWithDetails: ({ userId, }: {
        userId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Accounts.AccountWithDetails[]>>;
    getAccount: ({ userId, accountId }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Accounts.Account>>;
    getAccountBalances: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Balances.Balance[]>>;
    getAccountWithDetails: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Accounts.AccountWithDetails>>;
    getAccountHoldings: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Holdings.HoldingsValuation[]>>;
    getAccountHoldingsWithMatches: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Holdings.HoldingWithMatches[]>>;
    getAccountCounterparties: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
        params?: import("./request").SearchParams | undefined;
    }) => Promise<import("./request").ApiResponse<Counterparties.Counterparty[]>>;
    getAccountRecurringTransactions: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<Transactions.RecurringTransactionEstimate[]>>;
    getAccountStandingOrders: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<StandingOrders.StandingOrder[]>>;
    createAccount: ({ userId, account }: {
        userId: string;
        account: Accounts.AccountPost;
    }) => Promise<import("./request").ApiResponse<Accounts.Account>>;
    deleteAccount: ({ userId, accountId }: {
        userId: string;
        accountId: string;
    }) => Promise<number>;
    getAccountHolding: ({ userId, accountId, holdingId, }: {
        userId: string;
        accountId: string;
        holdingId: string;
    }) => Promise<import("./request").ApiResponse<Holdings.HoldingWithMatchesAndHistory>>;
    getAccountStandingOrdersWithDetail: ({ userId, accountId, }: {
        userId: string;
        accountId: string;
    }) => Promise<import("./request").ApiResponse<StandingOrders.StandingOrderWithDetail[]>>;
    addAccountBalance: ({ userId, accountId, balance }: {
        userId: string;
        accountId: string;
        balance: Accounts.AccountBalancePost;
    }) => Promise<import("./request").ApiResponse<Accounts.AccountBalancePost>>;
    updateAccount: ({ userId, accountId, account }: {
        userId: string;
        accountId: string;
        account: Accounts.AccountPatch;
    }) => Promise<import("./request").ApiResponse<Accounts.AccountWithDetails>>;
    exchangeCodeForTokensLegacy: ({ state, code, nonce, id_token, }: {
        state: string;
        code: string;
        nonce: string;
        id_token?: string | undefined;
    }) => Promise<import("openid-client").TokenSet>;
    exchangeCodeForTokens: ({ paramsFromCallback, localParams }: {
        paramsFromCallback: import("./exchange-code-for-token").ParamsFromCallback;
        localParams: import("./exchange-code-for-token").LocalParams;
    }) => Promise<import("openid-client").TokenSet>;
    refreshTokens: ({ refreshToken }: {
        refreshToken: string | import("openid-client").TokenSet;
    }) => Promise<import("openid-client").TokenSet>;
    getClientCredentialTokens: ({ scope, sub }: {
        scope: string;
        sub: string;
    }) => Promise<import("openid-client").TokenSet>;
    getJWTBearerToken: ({ scope, sub }: {
        scope: string;
        sub: string;
    }) => Promise<import("openid-client").TokenSet>;
    createJWTBearerGrantToken: (sub: string) => Promise<string>;
    getAuthorizeUrl: ({ state, scope, nonce, claims, permissions, enableAsync, expirationDateTime, transactionFromDateTime, }: {
        state?: string | undefined;
        scope: string;
        nonce?: string | undefined;
        claims?: any;
        permissions?: string[] | undefined;
        enableAsync?: boolean | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
    }) => Promise<string>;
    getAuthorizeUrlFromRequestUri: ({ requestUri }: {
        requestUri: string;
    }) => string;
    requestObject: ({ scope, state, claims, nonce, }: {
        scope: string;
        state?: string | undefined;
        claims: object;
        nonce?: string | undefined;
    }) => Promise<string>;
    getRequestUri: (requestObject: any) => Promise<string>;
    getAuthorizeUrlForCreatedUser: ({ bankId, state, nonce, userId, claims, permissions, expirationDateTime, transactionFromDateTime, enableAsync, }: {
        bankId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        userId: string;
        claims?: any;
        permissions?: string[] | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
    }) => Promise<string>;
    getReauthAuthorizeUrlForCreatedUser: ({ userId, connectionId, state, nonce, claims, expirationDateTime, transactionFromDateTime, enableAsync, }: {
        userId: string;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
    }) => Promise<string>;
    getReconsentAuthorizeUrlForCreatedUser: ({ userId, connectionId, expiresAt, state, nonce, claims, }: {
        userId: string;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expiresAt?: string | undefined;
    }) => Promise<string>;
    getRefreshAuthorizeUrlForCreatedUser: ({ userId, connectionId, state, nonce, claims, expirationDateTime, transactionFromDateTime, enableAsync, }: {
        userId?: string | undefined;
        connectionId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        claims?: any;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
    }) => Promise<string>;
    getPaymentAuthorizeUrl: ({ bankId, payeeRef, payeeId, payee, payeeType, amount, payerRef, payerId, payerType, state, nonce, context, readRefundAccount, userId, claims, }: {
        bankId: string;
        payeeRef: string;
        payeeId?: string | undefined;
        payeeType?: string | undefined;
        amount: number;
        payerRef: string;
        payerId?: string | undefined;
        payee?: Payees.RequestPayee | undefined;
        payerType?: string | undefined;
        state?: string | undefined;
        nonce?: string | undefined;
        context?: string | undefined;
        readRefundAccount?: boolean | undefined;
        userId?: string | undefined;
        claims?: any;
    }) => Promise<string>;
    getReversePaymentAuthorizeUrl: ({ bankId, paymentId, state, nonce, amount, claims, payerId, payerType, }: {
        bankId: string;
        paymentId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        amount: number;
        claims?: any;
        payerId?: string | undefined;
        payerType?: Payments.PaymentActorType | undefined;
    }) => Promise<string>;
    getRecurringPaymentAuthorizeUrl: ({ bankId, payeeId, payee, payeeType, payerId, payerType, reference, validFromDate, validToDate, maximumIndividualAmount, currency, periodicLimits, type, context, state, nonce, userId, claims, }: {
        bankId: string;
        payeeId?: string | undefined;
        payee?: Payees.RequestPayee | undefined;
        payeeType?: string | undefined;
        payerId?: string | undefined;
        payerType?: string | undefined;
        reference?: string | undefined;
        validFromDate?: string | undefined;
        validToDate?: string | undefined;
        maximumIndividualAmount?: number | undefined;
        currency?: string | undefined;
        periodicLimits?: any;
        type?: string | undefined;
        context?: string | undefined;
        state?: string | undefined;
        nonce?: string | undefined;
        userId: string;
        claims?: any;
    }) => Promise<string>;
    getStandingOrderAuthorizeUrl: ({ bankId, payeeId, payee, payeeType, payerId, payerType, reference, frequency, numberOfPayments, firstPaymentAmount, recurringPaymentAmount, finalPaymentAmount, currency, firstPaymentDate, recurringPaymentDate, finalPaymentDate, state, nonce, context, claims, }: {
        bankId: string;
        payeeId?: string | undefined;
        payee?: Payees.RequestPayee | undefined;
        payeeType?: string | undefined;
        payerId?: string | undefined;
        payerType?: string | undefined;
        reference: string;
        frequency: StandingOrders.StandingOrderFrequency;
        numberOfPayments?: number | undefined;
        firstPaymentAmount: number;
        recurringPaymentAmount: number;
        finalPaymentAmount: number;
        currency?: string | undefined;
        firstPaymentDate: string;
        recurringPaymentDate: string;
        finalPaymentDate: string;
        state?: string | undefined;
        nonce?: string | undefined;
        context: string;
        claims?: any;
    }) => Promise<string>;
    getPushedAuthorisationRequestUrl: ({ bankId, state, nonce, userId, claims, permissions, expirationDateTime, transactionFromDateTime, enableAsync, codeChallenge, }: {
        bankId: string;
        state?: string | undefined;
        nonce?: string | undefined;
        userId?: string | undefined;
        context?: string | undefined;
        claims?: any;
        permissions?: string[] | undefined;
        expirationDateTime?: string | undefined;
        transactionFromDateTime?: string | undefined;
        enableAsync?: boolean | undefined;
        codeChallenge?: string | undefined;
    }) => Promise<string>;
}>;
export declare type MoneyhubInstance = Awaited<ReturnType<typeof _Moneyhub>>;
declare const Moneyhub: (apiClientConfig: ApiClientConfig) => Promise<MoneyhubInstance>;
import type * as Accounts from "./schema/account";
import type * as Affordability from "./schema/affordability";
import type * as AuthRequests from "./schema/auth-request";
import type * as Balances from "./schema/balance";
import type * as Beneficiaries from "./schema/beneficiary";
import type * as Categories from "./schema/category";
import type * as Counterparties from "./schema/counterparty";
import type * as Holdings from "./schema/holding";
import type * as Payees from "./schema/payee";
import type * as Payments from "./schema/payment";
import type * as Projects from "./schema/project";
import type * as RegularTransactions from "./schema/regular-transaction";
import type * as RentalRecords from "./schema/rental-record";
import type * as SavingsGoals from "./schema/savings-goal";
import type * as SpendingAnalysis from "./schema/spending-analysis";
import type * as SpendingGoals from "./schema/spending-goal";
import type * as StandingOrders from "./schema/standing-order";
import type * as Syncs from "./schema/sync";
import type * as Taxes from "./schema/tax";
import type * as Transactions from "./schema/transaction";
import type * as Users from "./schema/user";
export { Accounts, Affordability, AuthRequests, Balances, Beneficiaries, Categories, Counterparties, Holdings, Payees, Payments, Projects, RegularTransactions, RentalRecords, SavingsGoals, SpendingAnalysis, SpendingGoals, StandingOrders, Syncs, Taxes, Transactions, Users, ApiClientConfig, Moneyhub, };
//# sourceMappingURL=index.d.ts.map